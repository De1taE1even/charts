--- charts-original/values.yaml
+++ charts/values.yaml
@@ -1,9 +1,23 @@
+global:
+  cattle:
+    systemDefaultRegistry: ""
+
 rbac:
   create: true
   ## Use an existing ClusterRole/Role (depending on rbac.namespaced false/true)
   # useExistingRole: name-of-some-(cluster)role
   pspEnabled: true
-  pspUseAppArmor: true
+  pspAnnotations: {}
+  ## Specify pod annotations
+  ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
+  ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
+  ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
+  ##
+  # seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
+  # seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
+  # apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
+  # apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
+
   namespaced: false
   extraRoleRules: []
   # - apiGroups: []
@@ -73,9 +87,8 @@
 # schedulerName: "default-scheduler"
 
 image:
-  repository: grafana/grafana
-  # Overrides the Grafana image tag whose default is the chart appVersion
-  tag: ""
+  repository: rancher/mirrored-grafana-grafana
+  tag: 8.5.3
   sha: ""
   pullPolicy: IfNotPresent
 
@@ -88,13 +101,16 @@
   #   - myRegistrKeySecretName
 
 testFramework:
-  enabled: true
-  image: "bats/bats"
+  enabled: false
+  image: "rancher/mirrored-bats-bats"
   tag: "v1.4.1"
   imagePullPolicy: IfNotPresent
-  securityContext: {}
+  securityContext:
+    runAsNonRoot: true
+    runAsUser: 1000
 
 securityContext:
+  runAsNonRoot: true
   runAsUser: 472
   runAsGroup: 472
   fsGroup: 472
@@ -102,9 +118,6 @@
 containerSecurityContext:
   {}
 
-# Enable creating the grafana configmap
-createConfigmap: true
-
 # Extra configmaps to mount in grafana pods
 # Values are templated.
 extraConfigmapMounts: []
@@ -127,8 +140,8 @@
 # priorityClassName:
 
 downloadDashboardsImage:
-  repository: curlimages/curl
-  tag: 7.85.0
+  repository: rancher/mirrored-curlimages-curl
+  tag: 7.77.0
   sha: ""
   pullPolicy: IfNotPresent
 
@@ -136,7 +149,6 @@
   env: {}
   envFromSecret: ""
   resources: {}
-  securityContext: {}
 
 ## Pod Annotations
 # podAnnotations: {}
@@ -159,12 +171,9 @@
   port: 80
   targetPort: 3000
     # targetPort: 4181 To be used with a proxy extraContainer
-  ## Service annotations. Can be templated.
   annotations: {}
   labels: {}
   portName: service
-  # Adds the appProtocol field to the service. This allows to work with istio protocol selection. Ex: "http" or "tcp"
-  appProtocol: ""
 
 serviceMonitor:
   ## If true, a ServiceMonitor CRD is created for a prometheus operator
@@ -204,7 +213,7 @@
   labels: {}
   path: /
 
-  # pathType is only for k8s >= 1.1=
+  # pathType is only for k8s >= 1.18
   pathType: Prefix
 
   hosts:
@@ -253,11 +262,6 @@
 ##
 affinity: {}
 
-## Topology Spread Constraints
-## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
-##
-topologySpreadConstraints: []
-
 ## Additional init containers (evaluated as template)
 ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
 ##
@@ -328,7 +332,7 @@
   ## initChownData container image
   ##
   image:
-    repository: busybox
+    repository: rancher/mirrored-library-busybox
     tag: "1.31.1"
     sha: ""
     pullPolicy: IfNotPresent
@@ -477,13 +481,6 @@
   #   mountPath: /mnt/volume1
   #   readOnly: true
   #   hostPath: /usr/shared/
-  # - name: grafana-secrets
-  #   csi: true
-  #   data:
-  #     driver: secrets-store.csi.k8s.io
-  #     readOnly: true
-  #     volumeAttributes:
-  #       secretProviderClass: "grafana-env-spc"
 
 ## Container Lifecycle Hooks. Execute a specific bash command or make an HTTP request
 lifecycleHooks: {}
@@ -518,71 +515,6 @@
 #        authType: default
 #        defaultRegion: us-east-1
 
-## Configure grafana alerting (can be templated)
-## ref: http://docs.grafana.org/administration/provisioning/#alerting
-##
-alerting: {}
-  # rules.yaml:
-  #   apiVersion: 1
-  #   groups:
-  #     - orgId: 1
-  #       name: '{{ .Chart.Name }}_my_rule_group'
-  #       folder: my_first_folder
-  #       interval: 60s
-  #       rules:
-  #         - uid: my_id_1
-  #           title: my_first_rule
-  #           condition: A
-  #           data:
-  #             - refId: A
-  #               datasourceUid: '-100'
-  #               model:
-  #                 conditions:
-  #                   - evaluator:
-  #                       params:
-  #                         - 3
-  #                       type: gt
-  #                     operator:
-  #                       type: and
-  #                     query:
-  #                       params:
-  #                         - A
-  #                     reducer:
-  #                       type: last
-  #                     type: query
-  #                 datasource:
-  #                   type: __expr__
-  #                   uid: '-100'
-  #                 expression: 1==0
-  #                 intervalMs: 1000
-  #                 maxDataPoints: 43200
-  #                 refId: A
-  #                 type: math
-  #           dashboardUid: my_dashboard
-  #           panelId: 123
-  #           noDataState: Alerting
-  #           for: 60s
-  #           annotations:
-  #             some_key: some_value
-  #           labels:
-  #             team: sre_team_1
-  # contactpoints.yaml:
-  #   apiVersion: 1
-  #   contactPoints:
-  #     - orgId: 1
-  #       name: cp_1
-  #       receivers:
-  #         - uid: first_uid
-  #           type: pagerduty
-  #           settings:
-  #             integrationKey: XXX
-  #             severity: critical
-  #             class: ping failure
-  #             component: Grafana
-  #             group: app-stack
-  #             summary: |
-  #               {{ `{{ template "default.message" . }}` }}
-
 ## Configure notifiers
 ## ref: http://docs.grafana.org/administration/provisioning/#alert-notification-channels
 ##
@@ -643,12 +575,6 @@
   #     url: https://example.com/repository/test-b64.json
   #     token: ''
   #     b64content: true
-  #   local-dashboard-gitlab:
-  #     url: https://example.com/repository/test-gitlab.json
-  #     gitlabToken: ''
-  #   local-dashboard-bitbucket:
-  #     url: https://example.com/repository/test-bitbucket.json
-  #     bearerToken: ''
 
 ## Reference to external ConfigMap per provider. Use provider name as key and ConfigMap name as value.
 ## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
@@ -677,8 +603,6 @@
     mode: console
   grafana_net:
     url: https://grafana.net
-  server:
-    domain: "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ .Values.ingress.hosts | first }}{{ end }}"
 ## grafana Authentication can be enabled with the following values on grafana.ini
  # server:
       # The full public facing url you use in browser, used for redirects and emails
@@ -739,8 +663,8 @@
 ## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
 sidecar:
   image:
-    repository: quay.io/kiwigrid/k8s-sidecar
-    tag: 1.19.2
+    repository: rancher/mirrored-kiwigrid-k8s-sidecar
+    tag: 1.15.6
     sha: ""
   imagePullPolicy: IfNotPresent
   resources: {}
@@ -756,21 +680,13 @@
   enableUniqueFilenames: false
   readinessProbe: {}
   livenessProbe: {}
-  # Log level default for all sidecars. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL. Defaults to INFO
-  # logLevel: INFO
   dashboards:
     enabled: false
-    # Additional environment variables for the dashboards sidecar
-    env: {}
-    # Do not reprocess already processed unchanged resources on k8s API reconnect.
-    # ignoreAlreadyProcessed: true
     SCProvider: true
     # label that the configmaps with dashboards are marked with
     label: grafana_dashboard
     # value of label that the configmaps with dashboards are set to
-    labelValue: ""
-    # Log level. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL.
-    # logLevel: INFO
+    labelValue: null
     # folder in the pod that should hold the collected dashboards (unless `defaultFolderName` is set)
     folder: /tmp/dashboards
     # The default folder name, it will create a subfolder under the `folder` and put dashboards in there instead
@@ -820,16 +736,10 @@
     sizeLimit: {}
   datasources:
     enabled: false
-    # Additional environment variables for the datasourcessidecar
-    env: {}
-    # Do not reprocess already processed unchanged resources on k8s API reconnect.
-    # ignoreAlreadyProcessed: true
     # label that the configmaps with datasources are marked with
     label: grafana_datasource
     # value of label that the configmaps with datasources are set to
-    labelValue: ""
-    # Log level. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL.
-    # logLevel: INFO
+    labelValue: null
     # If specified, the sidecar will search for datasource config-maps inside this namespace.
     # Otherwise the namespace in which the sidecar is running will be used.
     # It's also possible to specify ALL to search in all namespaces
@@ -838,20 +748,8 @@
     watchMethod: WATCH
     # search in configmap, secret or both
     resource: both
-    # watchServerTimeout: request to the server, asking it to cleanly close the connection after that.
-    # defaults to 60sec; much higher values like 3600 seconds (1h) are feasible for non-Azure K8S
-    # watchServerTimeout: 3600
-    #
-    # watchClientTimeout: is a client-side timeout, configuring your local socket.
-    # If you have a network outage dropping all packets with no RST/FIN,
-    # this is how long your client waits before realizing & dropping the connection.
-    # defaults to 66sec (sic!)
-    # watchClientTimeout: 60
-    #
     # Endpoint to send request to reload datasources
     reloadURL: "http://localhost:3000/api/admin/provisioning/datasources/reload"
-    # Absolute path to shell script to execute after a datasource got reloaded
-    script: null
     skipReload: false
     # Deploy the datasource sidecar as an initContainer in addition to a container.
     # This is needed if skipReload is true, to load any datasources defined at startup time.
@@ -860,16 +758,10 @@
     sizeLimit: {}
   plugins:
     enabled: false
-    # Additional environment variables for the plugins sidecar
-    env: {}
-    # Do not reprocess already processed unchanged resources on k8s API reconnect.
-    # ignoreAlreadyProcessed: true
     # label that the configmaps with plugins are marked with
     label: grafana_plugin
     # value of label that the configmaps with plugins are set to
-    labelValue: ""
-    # Log level. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL.
-    # logLevel: INFO
+    labelValue: null
     # If specified, the sidecar will search for plugin config-maps inside this namespace.
     # Otherwise the namespace in which the sidecar is running will be used.
     # It's also possible to specify ALL to search in all namespaces
@@ -878,20 +770,8 @@
     watchMethod: WATCH
     # search in configmap, secret or both
     resource: both
-    # watchServerTimeout: request to the server, asking it to cleanly close the connection after that.
-    # defaults to 60sec; much higher values like 3600 seconds (1h) are feasible for non-Azure K8S
-    # watchServerTimeout: 3600
-    #
-    # watchClientTimeout: is a client-side timeout, configuring your local socket.
-    # If you have a network outage dropping all packets with no RST/FIN,
-    # this is how long your client waits before realizing & dropping the connection.
-    # defaults to 66sec (sic!)
-    # watchClientTimeout: 60
-    #
     # Endpoint to send request to reload plugins
     reloadURL: "http://localhost:3000/api/admin/provisioning/plugins/reload"
-    # Absolute path to shell script to execute after a plugin got reloaded
-    script: null
     skipReload: false
     # Deploy the datasource sidecar as an initContainer in addition to a container.
     # This is needed if skipReload is true, to load any plugins defined at startup time.
@@ -900,16 +780,8 @@
     sizeLimit: {}
   notifiers:
     enabled: false
-    # Additional environment variables for the notifierssidecar
-    env: {}
-    # Do not reprocess already processed unchanged resources on k8s API reconnect.
-    # ignoreAlreadyProcessed: true
     # label that the configmaps with notifiers are marked with
     label: grafana_notifier
-    # value of label that the configmaps with notifiers are set to
-    labelValue: ""
-    # Log level. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL.
-    # logLevel: INFO
     # If specified, the sidecar will search for notifier config-maps inside this namespace.
     # Otherwise the namespace in which the sidecar is running will be used.
     # It's also possible to specify ALL to search in all namespaces
@@ -934,9 +806,9 @@
   replicas: 1
   image:
     # image-renderer Image repository
-    repository: grafana/grafana-image-renderer
+    repository: rancher/mirrored-grafana-grafana-image-renderer
     # image-renderer Image tag
-    tag: latest
+    tag: 3.0.1
     # image-renderer Image sha (optional)
     sha: ""
     # image-renderer ImagePullPolicy
@@ -963,8 +835,6 @@
     # image-renderer service port used by both service and deployment
     port: 8081
     targetPort: 8081
-    # Adds the appProtocol field to the image-renderer service. This allows to work with istio protocol selection. Ex: "http" or "tcp"
-    appProtocol: ""
   # If https is enabled in Grafana, this needs to be set as 'https' to correctly configure the callback used in Grafana
   grafanaProtocol: http
   # In case a sub_path is used this needs to be added to the image renderer callback
@@ -1010,10 +880,6 @@
   ## When true, grafana will accept connections from any source
   ## (with the correct destination port).
   ##
-  ingress: true
-  ## @param networkPolicy.ingress When true enables the creation
-  ## an ingress network policy
-  ##
   allowExternal: true
   ## @param networkPolicy.explicitNamespacesSelector A Kubernetes LabelSelector to explicitly select namespaces from which traffic could be allowed
   ## If explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
@@ -1029,30 +895,6 @@
   ##    - {key: role, operator: In, values: [frontend]}
   ##
   explicitNamespacesSelector: {}
-  ##
-  ##
-  ##
-  ##
-  ##
-  ##
-  egress:
-    ## @param networkPolicy.egress.enabled When enabled, an egress network policy will be
-    ## created allowing grafana to connect to external data sources from kubernetes cluster.
-    enabled: false
-    ##
-    ## @param networkPolicy.egress.ports Add individual ports to be allowed by the egress
-    ports: []
-    ## Add ports to the egress by specifying - port: <port number>
-    ## E.X.
-    ## ports:
-      ## - port: 80
-      ## - port: 443
-  ##
-  ##
-  ##
-  ##
-  ##
-  ##
 
 # Enable backward compatibility of kubernetes where version below 1.13 doesn't have the enableServiceLinks option
 enableKubeBackwardCompatibility: false
